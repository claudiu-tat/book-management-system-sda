package com.sda.claudiu.bookmanagement.service;

import com.sda.claudiu.bookmanagement.model.Author;
import com.sda.claudiu.bookmanagement.repository.AuthorRepository;
import com.sda.claudiu.bookmanagement.service.exceptions.EntityNotFoundException;
import com.sda.claudiu.bookmanagement.service.exceptions.InvalidParameterException;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;

public class AuthorServiceImpl implements AuthorService {
    private final AuthorRepository authorRepository;

    public AuthorServiceImpl(AuthorRepository authorRepository) {
        this.authorRepository = authorRepository;
    }

    @Override
    public void createAuthor(String firstName, String lastName) throws InvalidParameterException {
        if (firstName == null || firstName.isBlank() || firstName.length() < 3) {
            throw new InvalidParameterException("Provided value for first name: " + firstName + " is invalid!");
        }
        if (lastName == null || lastName.isBlank() || lastName.length() < 3) {
            throw new InvalidParameterException("Provided value for last name: " + lastName + " is invalid!");
        }

        authorRepository.create(new Author(firstName, lastName));
    }

    @Override
    public void updateAuthor(int authorId, String firstName, String lastName) throws InvalidParameterException, EntityNotFoundException {
        if (authorId < 1) {
            throw new InvalidParameterException("Provided value for author id: " + authorId + " is invalid!");
        }
        if (firstName == null || firstName.isBlank() || firstName.length() < 3) {
            throw new InvalidParameterException("Provided value for first name: " + firstName + " is invalid!");
        }
        if (lastName == null || lastName.isBlank() || lastName.length() < 3) {
            throw new InvalidParameterException("Provided value for last name: " + lastName + " is invalid!");
        }
        Optional<Author> authorOptional = authorRepository.findById(authorId); // search for it in list
        if (authorOptional.isEmpty()) {
            throw new EntityNotFoundException("Author with id: " + authorId + " was not found!");
        }

        Author author = authorOptional.get(); // here we take out after we found it and store it in a variable

        author.setFirstName(firstName); // set new values
        author.setLastName(lastName);

        authorRepository.update(author); // update made
    }

    @Override
    public void deleteAuthor(int authorId) throws InvalidParameterException, EntityNotFoundException {
        if (authorId < 1) {
            throw new InvalidParameterException("Provided value for author id: " + authorId + " is invalid!");
        }

        Optional<Author> authorOptional = authorRepository.findById(authorId); // search for it in list
        if (authorOptional.isEmpty()) {
            throw new EntityNotFoundException("Author with id: " + authorId + " was not found!");
        }

        Author author = authorOptional.get(); // here we take out after we found it

        authorRepository.delete(author);
    }

    @Override
    public void importAuthors() throws IOException {
        Path filePath = Paths.get("C:\\Users\\claud\\Documents\\book-management-system-sda\\src\\main\\resources\\Data\\Authors.csv");  // we have to declare the path to get the file
        Files.lines(filePath)                                                               // here we stream the file
                .skip(1)                                                                // here we skip first line because is the fields
                .filter(line -> line != null)                                               // validate not be null - get out all the file null
                .filter(line -> !line.isBlank())                                            // validate not be empty - get out all the file is empty
                .map(line -> line.split("\\|"))                                        // here we separate with vertical line
                .forEach(authorProperties -> {                                              // make an array
                    // Primary Key is autogenerated
                    // int authorId = Integer.parseInt(authorProperties[0]);
                    try {
                        String firstName = authorProperties[1];
                        String lastName = authorProperties[2];
                        createAuthor(firstName, lastName);
                    } catch (Exception e) {
                        System.err.println(e.getMessage());

                    }
                });
    }

    @Override
    public List<Author> getAllAuthors() {
        return authorRepository.findAll();
    }

}
